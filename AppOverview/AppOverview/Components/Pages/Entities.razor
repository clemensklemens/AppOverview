@page "/entities"
@using AppOverview.Model
@inject IDataProvider DataProvider
@rendermode InteractiveServer

<PageTitle>Entities</PageTitle>

<h1>Entities</h1>

<button class="btn btn-primary mb-3" @onclick="ShowNewForm">New Entity</button>

@if (showForm)
{
    <EditForm Model="editEntity" OnValidSubmit="OnSubmitEntity">
        <DataAnnotationsValidator />
        <div class="mb-2">
            <label>Name:</label>
            <InputText class="form-control" @bind-Value="editEntity.Name" />
        </div>
        <div class="mb-2">
            <label>Description:</label>
            <InputText class="form-control" @bind-Value="editEntity.Description" />
        </div>
        <div class="mb-2">
            <label>Type:</label>
            <InputSelect class="form-control" @bind-Value="editEntity.TypeId" >
                <option value="">Select Type</option>
                @if (entityTypes != null)
                {
                    foreach (var entityType in entityTypes)
                    {
                        <option value="@entityType.Id">@entityType.Name</option>
                    }
                }
            </InputSelect>
        </div>
        <div class="mb-2">
            <label>Department:</label>
            <InputSelect class="form-control" @bind-Value="editEntity.DepartmentId">
                <option value="">Select department</option>
                @if (departments != null)
                {
                    foreach (var department in departments)
                    {
                        <option value="@department.Id">@department.Name</option>
                    }
                }
            </InputSelect>
        </div>
        <div class="mb-2">
            <label>Technology:</label>
            <InputSelect class="form-control" @bind-Value="editEntity.TechnologyId">
                <option value="">Select technology</option>
                @if (technologies != null)
                {
                    foreach (var technology in technologies)
                    {
                        <option value="@technology.Id">@technology.Name</option>
                    }
                }
            </InputSelect>
        </div>
        <div class="mb-2">
            <label>Active:</label>
            <InputCheckbox class="form-check-input" @bind-Value="editEntity.IsActive" />
        </div>
        <button class="btn btn-success me-2" type="submit">Save</button>
        <button class="btn btn-secondary" type="button" @onclick="CancelEdit">Cancel</button>
    </EditForm>
}

@if (entities == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Type</th>
                <th>Department</th>
                <th>Technology</th>
                <th>Color</th>
                <th>Active</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entity in entities)
            {
                <tr @key="entity.Id">
                    <td>@entity.Name</td>
                    <td>@entity.Description</td>
                    <td>@entity.Type</td>
                    <td>@entity.Department</td>
                    <td>@entity.Technology</td>
                    <td><span style="color:@entity.ColorHex">@entity.ColorHex</span></td>
                    <td>
                        <input type="checkbox" checked="@entity.IsActive" disabled />
                    </td>
                    <td>
                        <button class="btn btn-sm btn-outline-secondary" type="button" @onclick="() => ShowEditForm(entity)">Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<EntityDTO>? entities;
    private List<DepartmentDTO>? departments;
    private List<TechnologyDTO>? technologies;
    private List<EntityTypeDTO>? entityTypes;
    private EntityDTO editEntity = new EntityDTO();
    private bool showForm = false;
    private bool isEdit = false;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(300); // Simulate async loading
        var enityData = await DataProvider.GetEntitiesAsync();
        entities = enityData.ToList();
        var departmentData = await DataProvider.GetDepartmentsAsync();
        departments = departmentData.ToList();
        var technologyData = await DataProvider.GetTechnologiesAsync();
        technologies = technologyData.ToList();
        var entityTypeData = await DataProvider.GetEntityTypesAsync();
        entityTypes = entityTypeData.ToList();
    }

    private void ShowNewForm()
    {
        editEntity = new EntityDTO();
        showForm = true;
        isEdit = false;
    }

    private void ShowEditForm(EntityDTO entity)
    {
        editEntity = entity;
        showForm = true;
        isEdit = true;
    }

    private void CancelEdit()
    {
        showForm = false;
    }

    private async Task OnSubmitEntity()
    {
        if (entities == null)
        {
            return;
        }

        editEntity = FindNestedValues(editEntity);
        if (isEdit)
        {
            var idx = entities.FindIndex(e => e.Id == editEntity.Id);
            if (idx >= 0)
            {
                entities[idx] = editEntity;
                await DataProvider.UpdateEntityAsync(editEntity);
            }            
        }
        else
        {
            var newId = entities.Count > 0 ? entities.Max(e => e.Id) + 1 : 1;
            editEntity.Id = newId;
            entities.Add(editEntity);
            await DataProvider.AddEntityAsync(editEntity);
        }
        showForm = false;
        StateHasChanged();
    }

    private EntityDTO FindNestedValues(EntityDTO dto)
    {        
        dto.Department = departments?.FirstOrDefault(d => d.Id == dto.DepartmentId)?.Name ?? string.Empty;
        dto.Technology = technologies?.FirstOrDefault(t => t.Id == dto.TechnologyId)?.Name ?? string.Empty;
        dto.Type = entityTypes?.FirstOrDefault(et => et.Id == dto.TypeId)?.Name ?? string.Empty;
        dto.ColorHex = entityTypes?.FirstOrDefault(et => et.Id == dto.TypeId)?.ColorHex ?? "#FFFFFF"; // Default color if not found
        return dto;
    }
}
